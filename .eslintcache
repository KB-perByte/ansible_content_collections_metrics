[{"P:\\web\\ansible-github-metrics\\src\\index.js":"1","P:\\web\\ansible-github-metrics\\src\\App.js":"2","P:\\web\\ansible-github-metrics\\src\\components\\Navbar.js":"3","P:\\web\\ansible-github-metrics\\src\\components\\ACIssues.js":"4","P:\\web\\ansible-github-metrics\\src\\components\\ACPullRequests.js":"5","P:\\web\\ansible-github-metrics\\src\\components\\Collections.js":"6","P:\\web\\ansible-github-metrics\\src\\components\\IssueTable.js":"7","P:\\web\\ansible-github-metrics\\src\\components\\PRTable.js":"8","P:\\web\\ansible-github-metrics\\src\\queries\\queries.js":"9","P:\\web\\ansible-github-metrics\\src\\components\\CollectionInsights.js":"10","P:\\web\\ansible-github-metrics\\src\\components\\filters.js":"11","P:\\web\\ansible-github-metrics\\src\\components\\IssueColumns.js":"12","P:\\web\\ansible-github-metrics\\src\\components\\PRColumns.js":"13"},{"size":693,"mtime":1611466765672,"results":"14","hashOfConfig":"15"},{"size":1529,"mtime":1611473067652,"results":"16","hashOfConfig":"15"},{"size":377,"mtime":1611419483773,"results":"17","hashOfConfig":"15"},{"size":1825,"mtime":1611419483769,"results":"18","hashOfConfig":"15"},{"size":1835,"mtime":1611419483769,"results":"19","hashOfConfig":"15"},{"size":1645,"mtime":1611466586271,"results":"20","hashOfConfig":"15"},{"size":5365,"mtime":1611419483773,"results":"21","hashOfConfig":"15"},{"size":5345,"mtime":1611419483773,"results":"22","hashOfConfig":"15"},{"size":2452,"mtime":1611466775292,"results":"23","hashOfConfig":"15"},{"size":1245,"mtime":1611466775292,"results":"24","hashOfConfig":"15"},{"size":3429,"mtime":1611472987451,"results":"25","hashOfConfig":"15"},{"size":1659,"mtime":1611472647201,"results":"26","hashOfConfig":"15"},{"size":1616,"mtime":1611472894574,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"16c2yk6",{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"P:\\web\\ansible-github-metrics\\src\\index.js",[],["60","61"],"P:\\web\\ansible-github-metrics\\src\\App.js",["62","63","64","65"],"P:\\web\\ansible-github-metrics\\src\\components\\Navbar.js",[],"P:\\web\\ansible-github-metrics\\src\\components\\ACIssues.js",["66","67"],"import { useQuery } from '@apollo/client';\r\nimport { ISSUES } from '../queries/queries';\r\nimport IssueTable from './IssueTable';\r\nimport { useState } from 'react';\r\n\r\nconst ACIssues = ({ repository }) => {\r\n\r\n  // const [repository, setRepository] = useState(\"cisco.nxos\");\r\n\r\n    const { loading, error, data, refetch } = useQuery(ISSUES, {\r\n      variables: {repositoryName: repository}\r\n    });\r\n    // console.log(data);\r\n\r\n    return (\r\n        <div className=\"ac-issues\">\r\n{/* \r\n          <div>\r\n            <label>Repositories: </label>\r\n            <select\r\n              value={repository}\r\n              onChange={(e) => setRepository(e.target.value)}>\r\n              <option value=\"cisco.nxos\">cisco.nxos</option>\r\n              <option value=\"cisco.ios\">cisco.ios</option>\r\n              <option value=\"cisco.iosxr\">cisco.iosxr</option>\r\n              <option value=\"arista.eos\">arista.eos</option>\r\n              <option value=\"vyos.vyos\">vyos.vyos</option>\r\n              <option value=\"junipernetworks.junos\">junipernetworks.junos</option>\r\n              <option value=\"cisco.asa\">cisco.asa</option>\r\n              <option value=\"ansible.netcommon\">ansible.netcommon</option>\r\n              <option value=\"frr.frr\">frr.frr</option>\r\n              <option value=\"openvswitch.openvswitch\">openvswitch.openvswitch</option>\r\n              <option value=\"community.yang\">community.yang</option>\r\n              <option value=\"ansible.utils\">ansible.utils</option>\r\n            </select>\r\n          </div> */}\r\n\r\n            { error && <div>{ error }</div>}\r\n            { loading && <div>Loading...</div>}\r\n            { data && <IssueTable name={ data.repository.name } issues={ data.repository.issues.edges } count={ data.repository.issues.edges.length }/> }\r\n        </div>\r\n    );\r\n\r\n} \r\nexport default ACIssues;","P:\\web\\ansible-github-metrics\\src\\components\\ACPullRequests.js",["68","69"],"import { useQuery } from '@apollo/client';\r\nimport { PR } from '../queries/queries';\r\nimport PRTable from './PRTable';\r\nimport { useState } from 'react';\r\n\r\nconst ACPullRequests = ({ repository }) => {\r\n\r\n  // const [repository, setRepository] = useState(\"cisco.nxos\");\r\n\r\n    const { loading, error, data, refetch } = useQuery(PR, {\r\n      variables: {repositoryName: repository}\r\n    });\r\n    // console.log(data);\r\n\r\n    return (\r\n        <div className=\"ac-pull-requests\">\r\n\r\n          {/* <div>\r\n            <label>Repositories: </label>\r\n            <select\r\n              value={repository}\r\n              onChange={(e) => setRepository(e.target.value)}>\r\n              <option value=\"cisco.nxos\">cisco.nxos</option>\r\n              <option value=\"cisco.ios\">cisco.ios</option>\r\n              <option value=\"cisco.iosxr\">cisco.iosxr</option>\r\n              <option value=\"arista.eos\">arista.eos</option>\r\n              <option value=\"vyos.vyos\">vyos.vyos</option>\r\n              <option value=\"junipernetworks.junos\">junipernetworks.junos</option>\r\n              <option value=\"cisco.asa\">cisco.asa</option>\r\n              <option value=\"ansible.netcommon\">ansible.netcommon</option>\r\n              <option value=\"frr.frr\">frr.frr</option>\r\n              <option value=\"openvswitch.openvswitch\">openvswitch.openvswitch</option>\r\n              <option value=\"community.yang\">community.yang</option>\r\n              <option value=\"ansible.utils\">ansible.utils</option>\r\n            </select>\r\n          </div> */}\r\n\r\n            { error && <div>{ error }</div>}\r\n            { loading && <div>Loading...</div>}\r\n            { data && <PRTable name={ data.repository.name } pr={ data.repository.pullRequests.edges } count={ data.repository.pullRequests.edges.length }/> }\r\n        </div>\r\n    );\r\n\r\n} \r\nexport default ACPullRequests;","P:\\web\\ansible-github-metrics\\src\\components\\Collections.js",[],"P:\\web\\ansible-github-metrics\\src\\components\\IssueTable.js",["70","71","72","73","74"],"import { useState, useMemo } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Table } from 'reactstrap';\r\nimport { useTable, useFilters, useSortBy, usePagination } from 'react-table';\r\nimport { COLUMNS } from './IssueColumns';\r\nimport { Filter, DefaultColumnFilter } from './filters';\r\nimport { Button } from \"bootstrap\";\r\n\r\n\r\nconst IssueTable = ({ name, issues, count }) => {\r\n\r\n    // const columns = useMemo(() => COLUMNS, []);\r\n    // const data = useMemo(() => issues, []);\r\n\r\n    const columns = COLUMNS;\r\n    const data = issues;\r\n\r\n    const tableInstance = useTable({\r\n        columns,\r\n        data,\r\n        defaultColumn: { Filter: DefaultColumnFilter },\r\n        },\r\n        useFilters,\r\n        useSortBy,\r\n        usePagination);\r\n\r\n    const { \r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        page,\r\n        nextPage,\r\n        previousPage,\r\n        canNextPage,\r\n        canPreviousPage,\r\n        pageOptions,\r\n        gotoPage,\r\n        pageCount,\r\n        setPageSize,\r\n        state,\r\n        prepareRow\r\n    } = tableInstance;\r\n\r\n    const { pageIndex, pageSize } = state;\r\n\r\n    const generateSortingIndicator = (column) => {\r\n        return column.isSorted ? (column.isSortedDesc ? ' ⬇' : ' ⬆') : ' ⬍';\r\n    };\r\n\r\n    return (\r\n        <div className=\"issue-list\">\r\n            <h2>Repository: { name }</h2>\r\n            <h2>Issues: { count }</h2>\r\n\r\n            <Table bordered hover className=\"issue-table\" { ...getTableProps() }>\r\n                <thead>\r\n                    {\r\n                        headerGroups.map((headerGroup) => (\r\n                            <tr { ...headerGroup.getHeaderGroupProps() }>\r\n                                {\r\n                                    headerGroup.headers.map((column) => (\r\n                                        <th { ...column.getHeaderProps(column.getSortByToggleProps()) }>\r\n                                            {\r\n                                                column.render('Header')\r\n                                            }\r\n                                            <span>\r\n                                                { generateSortingIndicator(column) }\r\n                                            </span>\r\n                                            <Filter column={column} />\r\n                                        </th>\r\n                                    ))\r\n                                }\r\n                            </tr>\r\n                        ))\r\n                    }\r\n                </thead>\r\n                <tbody { ...getTableBodyProps() }>\r\n                    {\r\n                        page.map((row) => {\r\n                            prepareRow(row)\r\n                            return (\r\n                                <tr { ...row.getRowProps() }>\r\n                                    {\r\n                                        row.cells.map((cell) => {\r\n                                            return (\r\n                                                <td { ...cell.getCellProps() }>\r\n                                                    {\r\n                                                        cell.render('Cell')\r\n                                                    }\r\n                                                </td>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </tr>\r\n                            )\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </Table>\r\n            <div>\r\n                <span>\r\n                    Page{ ' ' }\r\n                    <strong>\r\n                        { pageIndex + 1 } of { pageOptions.length }\r\n                    </strong>\r\n                    { ' ' }\r\n                </span>\r\n                <span>\r\n                    | Go to page: { ' ' }\r\n                    <input type=\"number\" defaultValue={ pageIndex + 1 }\r\n                        onChange={ (e) => {\r\n                            const pageNumber = e.target.value ? Number(e.target.value) - 1 : 0\r\n                            gotoPage(pageNumber)\r\n                        } }\r\n                        style={ { width: '50px' } }>\r\n                    </input>\r\n                </span>\r\n                <select value={ pageSize } onChange={ (e) => setPageSize(Number(e.target.value)) }>\r\n                    {\r\n                        [10, 25, 50].map((pageSize) => (\r\n                            <option key={ pageSize } value={ pageSize }>\r\n                                Show { pageSize }\r\n                            </option>\r\n                        ))\r\n                    }\r\n                </select>\r\n                <button onClick={ () => gotoPage(0) } disabled={ !canPreviousPage }>\r\n                    { '<<' }\r\n                </button>\r\n                <button onClick={ () => previousPage() } disabled={ !canPreviousPage }>Previous</button>\r\n                <button onClick={ () => nextPage() } disabled={ !canNextPage }>Next</button>\r\n                <button onClick={ () => gotoPage(pageCount - 1) } disabled={ !canNextPage }>\r\n                    { '>>' }\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n \r\nexport default IssueTable;","P:\\web\\ansible-github-metrics\\src\\components\\PRTable.js",["75","76","77","78","79"],"import { useState, useMemo } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Table } from 'reactstrap';\r\nimport { useTable, useFilters, useSortBy, usePagination } from 'react-table';\r\nimport { COLUMNS } from './PRColumns';\r\nimport { Filter, DefaultColumnFilter } from './filters';\r\nimport { Button } from \"bootstrap\";\r\n\r\n\r\nconst PRTable = ({ name, pr, count }) => {\r\n\r\n    // const columns = useMemo(() => COLUMNS, []);\r\n    // const data = useMemo(() => pr, []);\r\n\r\n    const columns = COLUMNS;\r\n    const data = pr;\r\n\r\n    const tableInstance = useTable({\r\n        columns,\r\n        data,\r\n        defaultColumn: { Filter: DefaultColumnFilter },\r\n        },\r\n        useFilters,\r\n        useSortBy,\r\n        usePagination);\r\n\r\n    const { \r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        page,\r\n        nextPage,\r\n        previousPage,\r\n        canNextPage,\r\n        canPreviousPage,\r\n        pageOptions,\r\n        gotoPage,\r\n        pageCount,\r\n        setPageSize,\r\n        state,\r\n        prepareRow\r\n    } = tableInstance;\r\n\r\n    const { pageIndex, pageSize } = state;\r\n\r\n    const generateSortingIndicator = (column) => {\r\n        return column.isSorted ? (column.isSortedDesc ? ' ⬇' : ' ⬆') : ' ⬍';\r\n    };\r\n\r\n    return (\r\n        <div className=\"pr-list\">\r\n            <h2>Repository: { name }</h2>\r\n            <h2>Pull Requests: { count }</h2>\r\n\r\n            <Table bordered hover className=\"pr-table\" { ...getTableProps() }>\r\n                <thead>\r\n                    {\r\n                        headerGroups.map((headerGroup) => (\r\n                            <tr { ...headerGroup.getHeaderGroupProps() }>\r\n                                {\r\n                                    headerGroup.headers.map((column) => (\r\n                                        <th { ...column.getHeaderProps(column.getSortByToggleProps()) }>\r\n                                            {\r\n                                                column.render('Header')\r\n                                            }\r\n                                            <span>\r\n                                                { generateSortingIndicator(column) }\r\n                                            </span>\r\n                                            <Filter column={column} />\r\n                                        </th>\r\n                                    ))\r\n                                }\r\n                            </tr>\r\n                        ))\r\n                    }\r\n                </thead>\r\n                <tbody { ...getTableBodyProps() }>\r\n                    {\r\n                        page.map((row) => {\r\n                            prepareRow(row)\r\n                            return (\r\n                                <tr { ...row.getRowProps() }>\r\n                                    {\r\n                                        row.cells.map((cell) => {\r\n                                            return (\r\n                                                <td { ...cell.getCellProps() }>\r\n                                                    {\r\n                                                        cell.render('Cell')\r\n                                                    }\r\n                                                </td>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </tr>\r\n                            )\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </Table>\r\n            <div>\r\n                <span>\r\n                    Page{ ' ' }\r\n                    <strong>\r\n                        { pageIndex + 1 } of { pageOptions.length }\r\n                    </strong>\r\n                    { ' ' }\r\n                </span>\r\n                <span>\r\n                    | Go to page: { ' ' }\r\n                    <input type=\"number\" defaultValue={ pageIndex + 1 }\r\n                        onChange={ (e) => {\r\n                            const pageNumber = e.target.value ? Number(e.target.value) - 1 : 0\r\n                            gotoPage(pageNumber)\r\n                        } }\r\n                        style={ { width: '50px' } }>\r\n                    </input>\r\n                </span>\r\n                <select value={ pageSize } onChange={ (e) => setPageSize(Number(e.target.value)) }>\r\n                    {\r\n                        [10, 25, 50].map((pageSize) => (\r\n                            <option key={ pageSize } value={ pageSize }>\r\n                                Show { pageSize }\r\n                            </option>\r\n                        ))\r\n                    }\r\n                </select>\r\n                <button onClick={ () => gotoPage(0) } disabled={ !canPreviousPage }>\r\n                    { '<<' }\r\n                </button>\r\n                <button onClick={ () => previousPage() } disabled={ !canPreviousPage }>Previous</button>\r\n                <button onClick={ () => nextPage() } disabled={ !canNextPage }>Next</button>\r\n                <button onClick={ () => gotoPage(pageCount - 1) } disabled={ !canNextPage }>\r\n                    { '>>' }\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n \r\nexport default PRTable;","P:\\web\\ansible-github-metrics\\src\\queries\\queries.js",["80"],"import { gql } from '@apollo/client';\r\n\r\nconst MY_ISSUES =  gql`\r\n    {\r\n        repositoryOwner(login: \"BroadwayFriends\") {\r\n        repository(name: \"FriendlyNeighborAndroid\") {\r\n            name\r\n            issues(last: 100) {\r\n            totalCount\r\n            edges {\r\n                node {\r\n                id\r\n                createdAt\r\n                title\r\n                url\r\n                createdAt\r\n                author {\r\n                    login\r\n                }\r\n                closed\r\n                }\r\n            }\r\n            }\r\n        }\r\n        }\r\n    }\r\n`;\r\n\r\nconst ISSUES = gql`\r\n    query ($repositoryName: String!){\r\n        repository(name: $repositoryName, owner: \"ansible-collections\") {\r\n            name,\r\n            issues(last: 100) {\r\n            edges {\r\n                node {\r\n                author {\r\n                    login\r\n                }\r\n                state\r\n                title\r\n                createdAt\r\n                url\r\n                updatedAt\r\n                id\r\n                }\r\n            }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst PR = gql`\r\n    query ($repositoryName: String!){\r\n        repository(name: $repositoryName, owner: \"ansible-collections\") {\r\n        name\r\n        pullRequests(last: 100) {\r\n            edges {\r\n            node {\r\n                author {\r\n                login\r\n                }\r\n                createdAt\r\n                merged\r\n                mergeable\r\n                milestone {\r\n                description\r\n                creator {\r\n                    login\r\n                }\r\n                }\r\n                updatedAt\r\n                url\r\n                state\r\n                title\r\n            }\r\n            }\r\n        }\r\n    }\r\n  }\r\n`;\r\n\r\nconst COLLECTION_INSIGHTS = gql`\r\n    query ($repositoryName: String!){\r\n        repository(name: $repositoryName, owner: \"ansible-collections\") {\r\n        openIssues: issues(filterBy: {states: [OPEN]}) {\r\n            totalCount\r\n        }\r\n        closedIssues: issues(filterBy: {states: [CLOSED]}) {\r\n            totalCount\r\n        }    \r\n        openPRs: pullRequests(states: OPEN) {\r\n            totalCount\r\n        }\r\n        closedPRs: pullRequests(states: CLOSED) {\r\n            totalCount\r\n        }\r\n        mergedPRs: pullRequests(states: MERGED) {\r\n            totalCount\r\n        }\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport { ISSUES, PR, COLLECTION_INSIGHTS };","P:\\web\\ansible-github-metrics\\src\\components\\CollectionInsights.js",[],"P:\\web\\ansible-github-metrics\\src\\components\\filters.js",["81"],"P:\\web\\ansible-github-metrics\\src\\components\\IssueColumns.js",["82","83"],"P:\\web\\ansible-github-metrics\\src\\components\\PRColumns.js",["84"],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":2,"column":35,"nodeType":"91","messageId":"92","endLine":2,"endColumn":40},{"ruleId":"89","severity":1,"message":"93","line":2,"column":42,"nodeType":"91","messageId":"92","endLine":2,"endColumn":48},{"ruleId":"89","severity":1,"message":"94","line":4,"column":8,"nodeType":"91","messageId":"92","endLine":4,"endColumn":16},{"ruleId":"89","severity":1,"message":"95","line":5,"column":8,"nodeType":"91","messageId":"92","endLine":5,"endColumn":22},{"ruleId":"89","severity":1,"message":"96","line":4,"column":10,"nodeType":"91","messageId":"92","endLine":4,"endColumn":18},{"ruleId":"89","severity":1,"message":"97","line":10,"column":35,"nodeType":"91","messageId":"92","endLine":10,"endColumn":42},{"ruleId":"89","severity":1,"message":"96","line":4,"column":10,"nodeType":"91","messageId":"92","endLine":4,"endColumn":18},{"ruleId":"89","severity":1,"message":"97","line":10,"column":35,"nodeType":"91","messageId":"92","endLine":10,"endColumn":42},{"ruleId":"89","severity":1,"message":"96","line":1,"column":10,"nodeType":"91","messageId":"92","endLine":1,"endColumn":18},{"ruleId":"89","severity":1,"message":"98","line":1,"column":20,"nodeType":"91","messageId":"92","endLine":1,"endColumn":27},{"ruleId":"89","severity":1,"message":"99","line":2,"column":10,"nodeType":"91","messageId":"92","endLine":2,"endColumn":14},{"ruleId":"89","severity":1,"message":"100","line":7,"column":10,"nodeType":"91","messageId":"92","endLine":7,"endColumn":16},{"ruleId":"89","severity":1,"message":"101","line":31,"column":9,"nodeType":"91","messageId":"92","endLine":31,"endColumn":13},{"ruleId":"89","severity":1,"message":"96","line":1,"column":10,"nodeType":"91","messageId":"92","endLine":1,"endColumn":18},{"ruleId":"89","severity":1,"message":"98","line":1,"column":20,"nodeType":"91","messageId":"92","endLine":1,"endColumn":27},{"ruleId":"89","severity":1,"message":"99","line":2,"column":10,"nodeType":"91","messageId":"92","endLine":2,"endColumn":14},{"ruleId":"89","severity":1,"message":"100","line":7,"column":10,"nodeType":"91","messageId":"92","endLine":7,"endColumn":16},{"ruleId":"89","severity":1,"message":"101","line":31,"column":9,"nodeType":"91","messageId":"92","endLine":31,"endColumn":13},{"ruleId":"89","severity":1,"message":"102","line":3,"column":7,"nodeType":"91","messageId":"92","endLine":3,"endColumn":16},{"ruleId":"103","severity":1,"message":"104","line":67,"column":8,"nodeType":"105","endLine":67,"endColumn":10,"suggestions":"106"},{"ruleId":"89","severity":1,"message":"107","line":2,"column":10,"nodeType":"91","messageId":"92","endLine":2,"endColumn":21},{"ruleId":"108","severity":1,"message":"109","line":40,"column":13,"nodeType":"110","endLine":40,"endColumn":57},{"ruleId":"108","severity":1,"message":"109","line":39,"column":13,"nodeType":"110","endLine":39,"endColumn":57},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'ACIssues' is defined but never used.","'ACPullRequests' is defined but never used.","'useState' is defined but never used.","'refetch' is assigned a value but never used.","'useMemo' is defined but never used.","'Link' is defined but never used.","'Button' is defined but never used.","'rows' is assigned a value but never used.","'MY_ISSUES' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'filterByDate' and 'setFilter'. Either include them or remove the dependency array.","ArrayExpression",["113"],"'CustomInput' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"114","fix":"115"},"Update the dependencies array to be: [filterByDate, setFilter]",{"range":"116","text":"117"},[1746,1748],"[filterByDate, setFilter]"]