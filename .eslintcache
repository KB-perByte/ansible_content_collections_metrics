[{"/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/index.js":"1","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/App.js":"2","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/ACIssues.js":"3","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/Navbar.js":"4","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/ACPullRequests.js":"5","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/Collections.js":"6","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/IssueTable.js":"7","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/PRTable.js":"8","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/queries/queries.js":"9","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/CollectionInsights.js":"10","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/filters.js":"11","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/PRColumns.js":"12","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/IssueColumns.js":"13"},{"size":670,"mtime":1611501291681,"results":"14","hashOfConfig":"15"},{"size":1472,"mtime":1611501291670,"results":"16","hashOfConfig":"15"},{"size":1781,"mtime":1611390463436,"results":"17","hashOfConfig":"15"},{"size":363,"mtime":1611254299816,"results":"18","hashOfConfig":"15"},{"size":1791,"mtime":1611390468397,"results":"19","hashOfConfig":"15"},{"size":1552,"mtime":1611500714392,"results":"20","hashOfConfig":"15"},{"size":5225,"mtime":1611383809598,"results":"21","hashOfConfig":"15"},{"size":5205,"mtime":1611385200262,"results":"22","hashOfConfig":"15"},{"size":2064,"mtime":1611501968957,"results":"23","hashOfConfig":"15"},{"size":1059,"mtime":1611500847565,"results":"24","hashOfConfig":"15"},{"size":3315,"mtime":1611501291681,"results":"25","hashOfConfig":"15"},{"size":1557,"mtime":1611501291680,"results":"26","hashOfConfig":"15"},{"size":1599,"mtime":1611501291680,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"3u8gy2",{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"30"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"30"},"/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/index.js",[],["63","64"],"/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/App.js",["65","66","67","68"],"import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport ACIssues from './components/ACIssues';\nimport ACPullRequests from './components/ACPullRequests';\nimport Collections from './components/Collections';\nimport { Container } from 'reactstrap';\n\nfunction App() {\n    return (\n        <Router>\n            <div className='App'>\n                <Navbar />\n                {/* <ACIssues />\n        <br></br>\n        <br></br>\n        <br></br>\n        <br></br>\n        <ACPullRequests /> */}\n                <Container>\n                    <Collections />\n                </Container>\n            </div>\n        </Router>\n    );\n}\n\n// function App() {\n\n//   const { loading, error, data } = useQuery(EXCHANGE_RATE);\n//   console.log(data);\n\n//   if (loading) return <p>Loading...</p>;\n//   if (error) return <p>Error :(</p>;\n\n//   return data.rates.map(({ currency, rate }) => (\n//     <div key={currency}>\n//       <p>\n//         {currency}: {rate}\n//       </p>\n//     </div>\n//   ));\n\n//   return (\n//       <div className=\"App\">\n//         <h2>My First Apollo App</h2>\n//         { loading && <h2>Loading...</h2>}\n//         { error && <h2>Whoops... Something went wrong</h2>}\n//         { data.rates.map((rate, id) => (\n//           <p id={ id }>{ rate.currency }</p>\n//         ))}\n//         {/* <p>{ data.rates }</p> */}\n//       </div>\n//   );\n// }\n\nexport default App;\n","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/ACIssues.js",["69","70"],"import { useQuery } from '@apollo/client';\nimport { ISSUES } from '../queries/queries';\nimport IssueTable from './IssueTable';\nimport { useState } from 'react';\n\nconst ACIssues = ({ repository }) => {\n\n  // const [repository, setRepository] = useState(\"cisco.nxos\");\n\n    const { loading, error, data, refetch } = useQuery(ISSUES, {\n      variables: {repositoryName: repository}\n    });\n    // console.log(data);\n\n    return (\n        <div className=\"ac-issues\">\n{/* \n          <div>\n            <label>Repositories: </label>\n            <select\n              value={repository}\n              onChange={(e) => setRepository(e.target.value)}>\n              <option value=\"cisco.nxos\">cisco.nxos</option>\n              <option value=\"cisco.ios\">cisco.ios</option>\n              <option value=\"cisco.iosxr\">cisco.iosxr</option>\n              <option value=\"arista.eos\">arista.eos</option>\n              <option value=\"vyos.vyos\">vyos.vyos</option>\n              <option value=\"junipernetworks.junos\">junipernetworks.junos</option>\n              <option value=\"cisco.asa\">cisco.asa</option>\n              <option value=\"ansible.netcommon\">ansible.netcommon</option>\n              <option value=\"frr.frr\">frr.frr</option>\n              <option value=\"openvswitch.openvswitch\">openvswitch.openvswitch</option>\n              <option value=\"community.yang\">community.yang</option>\n              <option value=\"ansible.utils\">ansible.utils</option>\n            </select>\n          </div> */}\n\n            { error && <div>{ error }</div>}\n            { loading && <div>Loading...</div>}\n            { data && <IssueTable name={ data.repository.name } issues={ data.repository.issues.edges } count={ data.repository.issues.edges.length }/> }\n        </div>\n    );\n\n} \nexport default ACIssues;","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/Navbar.js",[],"/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/ACPullRequests.js",["71","72"],"import { useQuery } from '@apollo/client';\nimport { PR } from '../queries/queries';\nimport PRTable from './PRTable';\nimport { useState } from 'react';\n\nconst ACPullRequests = ({ repository }) => {\n\n  // const [repository, setRepository] = useState(\"cisco.nxos\");\n\n    const { loading, error, data, refetch } = useQuery(PR, {\n      variables: {repositoryName: repository}\n    });\n    // console.log(data);\n\n    return (\n        <div className=\"ac-pull-requests\">\n\n          {/* <div>\n            <label>Repositories: </label>\n            <select\n              value={repository}\n              onChange={(e) => setRepository(e.target.value)}>\n              <option value=\"cisco.nxos\">cisco.nxos</option>\n              <option value=\"cisco.ios\">cisco.ios</option>\n              <option value=\"cisco.iosxr\">cisco.iosxr</option>\n              <option value=\"arista.eos\">arista.eos</option>\n              <option value=\"vyos.vyos\">vyos.vyos</option>\n              <option value=\"junipernetworks.junos\">junipernetworks.junos</option>\n              <option value=\"cisco.asa\">cisco.asa</option>\n              <option value=\"ansible.netcommon\">ansible.netcommon</option>\n              <option value=\"frr.frr\">frr.frr</option>\n              <option value=\"openvswitch.openvswitch\">openvswitch.openvswitch</option>\n              <option value=\"community.yang\">community.yang</option>\n              <option value=\"ansible.utils\">ansible.utils</option>\n            </select>\n          </div> */}\n\n            { error && <div>{ error }</div>}\n            { loading && <div>Loading...</div>}\n            { data && <PRTable name={ data.repository.name } pr={ data.repository.pullRequests.edges } count={ data.repository.pullRequests.edges.length }/> }\n        </div>\n    );\n\n} \nexport default ACPullRequests;","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/Collections.js",[],"/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/IssueTable.js",["73","74","75","76","77"],"import { useState, useMemo } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Table } from 'reactstrap';\nimport { useTable, useFilters, useSortBy, usePagination } from 'react-table';\nimport { COLUMNS } from './IssueColumns';\nimport { Filter, DefaultColumnFilter } from './filters';\nimport { Button } from \"bootstrap\";\n\n\nconst IssueTable = ({ name, issues, count }) => {\n\n    // const columns = useMemo(() => COLUMNS, []);\n    // const data = useMemo(() => issues, []);\n\n    const columns = COLUMNS;\n    const data = issues;\n\n    const tableInstance = useTable({\n        columns,\n        data,\n        defaultColumn: { Filter: DefaultColumnFilter },\n        },\n        useFilters,\n        useSortBy,\n        usePagination);\n\n    const { \n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        page,\n        nextPage,\n        previousPage,\n        canNextPage,\n        canPreviousPage,\n        pageOptions,\n        gotoPage,\n        pageCount,\n        setPageSize,\n        state,\n        prepareRow\n    } = tableInstance;\n\n    const { pageIndex, pageSize } = state;\n\n    const generateSortingIndicator = (column) => {\n        return column.isSorted ? (column.isSortedDesc ? ' ⬇' : ' ⬆') : ' ⬍';\n    };\n\n    return (\n        <div className=\"issue-list\">\n            <h2>Repository: { name }</h2>\n            <h2>Issues: { count }</h2>\n\n            <Table bordered hover className=\"issue-table\" { ...getTableProps() }>\n                <thead>\n                    {\n                        headerGroups.map((headerGroup) => (\n                            <tr { ...headerGroup.getHeaderGroupProps() }>\n                                {\n                                    headerGroup.headers.map((column) => (\n                                        <th { ...column.getHeaderProps(column.getSortByToggleProps()) }>\n                                            {\n                                                column.render('Header')\n                                            }\n                                            <span>\n                                                { generateSortingIndicator(column) }\n                                            </span>\n                                            <Filter column={column} />\n                                        </th>\n                                    ))\n                                }\n                            </tr>\n                        ))\n                    }\n                </thead>\n                <tbody { ...getTableBodyProps() }>\n                    {\n                        page.map((row) => {\n                            prepareRow(row)\n                            return (\n                                <tr { ...row.getRowProps() }>\n                                    {\n                                        row.cells.map((cell) => {\n                                            return (\n                                                <td { ...cell.getCellProps() }>\n                                                    {\n                                                        cell.render('Cell')\n                                                    }\n                                                </td>\n                                            )\n                                        })\n                                    }\n                                </tr>\n                            )\n                        })\n                    }\n                </tbody>\n            </Table>\n            <div>\n                <span>\n                    Page{ ' ' }\n                    <strong>\n                        { pageIndex + 1 } of { pageOptions.length }\n                    </strong>\n                    { ' ' }\n                </span>\n                <span>\n                    | Go to page: { ' ' }\n                    <input type=\"number\" defaultValue={ pageIndex + 1 }\n                        onChange={ (e) => {\n                            const pageNumber = e.target.value ? Number(e.target.value) - 1 : 0\n                            gotoPage(pageNumber)\n                        } }\n                        style={ { width: '50px' } }>\n                    </input>\n                </span>\n                <select value={ pageSize } onChange={ (e) => setPageSize(Number(e.target.value)) }>\n                    {\n                        [10, 25, 50].map((pageSize) => (\n                            <option key={ pageSize } value={ pageSize }>\n                                Show { pageSize }\n                            </option>\n                        ))\n                    }\n                </select>\n                <button onClick={ () => gotoPage(0) } disabled={ !canPreviousPage }>\n                    { '<<' }\n                </button>\n                <button onClick={ () => previousPage() } disabled={ !canPreviousPage }>Previous</button>\n                <button onClick={ () => nextPage() } disabled={ !canNextPage }>Next</button>\n                <button onClick={ () => gotoPage(pageCount - 1) } disabled={ !canNextPage }>\n                    { '>>' }\n                </button>\n            </div>\n        </div>\n    )\n}\n \nexport default IssueTable;","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/PRTable.js",["78","79","80","81","82"],"import { useState, useMemo } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Table } from 'reactstrap';\nimport { useTable, useFilters, useSortBy, usePagination } from 'react-table';\nimport { COLUMNS } from './PRColumns';\nimport { Filter, DefaultColumnFilter } from './filters';\nimport { Button } from \"bootstrap\";\n\n\nconst PRTable = ({ name, pr, count }) => {\n\n    // const columns = useMemo(() => COLUMNS, []);\n    // const data = useMemo(() => pr, []);\n\n    const columns = COLUMNS;\n    const data = pr;\n\n    const tableInstance = useTable({\n        columns,\n        data,\n        defaultColumn: { Filter: DefaultColumnFilter },\n        },\n        useFilters,\n        useSortBy,\n        usePagination);\n\n    const { \n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        page,\n        nextPage,\n        previousPage,\n        canNextPage,\n        canPreviousPage,\n        pageOptions,\n        gotoPage,\n        pageCount,\n        setPageSize,\n        state,\n        prepareRow\n    } = tableInstance;\n\n    const { pageIndex, pageSize } = state;\n\n    const generateSortingIndicator = (column) => {\n        return column.isSorted ? (column.isSortedDesc ? ' ⬇' : ' ⬆') : ' ⬍';\n    };\n\n    return (\n        <div className=\"pr-list\">\n            <h2>Repository: { name }</h2>\n            <h2>Pull Requests: { count }</h2>\n\n            <Table bordered hover className=\"pr-table\" { ...getTableProps() }>\n                <thead>\n                    {\n                        headerGroups.map((headerGroup) => (\n                            <tr { ...headerGroup.getHeaderGroupProps() }>\n                                {\n                                    headerGroup.headers.map((column) => (\n                                        <th { ...column.getHeaderProps(column.getSortByToggleProps()) }>\n                                            {\n                                                column.render('Header')\n                                            }\n                                            <span>\n                                                { generateSortingIndicator(column) }\n                                            </span>\n                                            <Filter column={column} />\n                                        </th>\n                                    ))\n                                }\n                            </tr>\n                        ))\n                    }\n                </thead>\n                <tbody { ...getTableBodyProps() }>\n                    {\n                        page.map((row) => {\n                            prepareRow(row)\n                            return (\n                                <tr { ...row.getRowProps() }>\n                                    {\n                                        row.cells.map((cell) => {\n                                            return (\n                                                <td { ...cell.getCellProps() }>\n                                                    {\n                                                        cell.render('Cell')\n                                                    }\n                                                </td>\n                                            )\n                                        })\n                                    }\n                                </tr>\n                            )\n                        })\n                    }\n                </tbody>\n            </Table>\n            <div>\n                <span>\n                    Page{ ' ' }\n                    <strong>\n                        { pageIndex + 1 } of { pageOptions.length }\n                    </strong>\n                    { ' ' }\n                </span>\n                <span>\n                    | Go to page: { ' ' }\n                    <input type=\"number\" defaultValue={ pageIndex + 1 }\n                        onChange={ (e) => {\n                            const pageNumber = e.target.value ? Number(e.target.value) - 1 : 0\n                            gotoPage(pageNumber)\n                        } }\n                        style={ { width: '50px' } }>\n                    </input>\n                </span>\n                <select value={ pageSize } onChange={ (e) => setPageSize(Number(e.target.value)) }>\n                    {\n                        [10, 25, 50].map((pageSize) => (\n                            <option key={ pageSize } value={ pageSize }>\n                                Show { pageSize }\n                            </option>\n                        ))\n                    }\n                </select>\n                <button onClick={ () => gotoPage(0) } disabled={ !canPreviousPage }>\n                    { '<<' }\n                </button>\n                <button onClick={ () => previousPage() } disabled={ !canPreviousPage }>Previous</button>\n                <button onClick={ () => nextPage() } disabled={ !canNextPage }>Next</button>\n                <button onClick={ () => gotoPage(pageCount - 1) } disabled={ !canNextPage }>\n                    { '>>' }\n                </button>\n            </div>\n        </div>\n    )\n}\n \nexport default PRTable;","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/queries/queries.js",["83"],"/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/CollectionInsights.js",[],"/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/filters.js",["84"],"import React, { useEffect } from 'react';\nimport { Input, CustomInput } from 'reactstrap';\nimport * as moment from 'moment';\n\nexport const Filter = ({ column }) => {\n    return (\n        <div style={{ marginTop: 5 }}>\n            {column.canFilter && column.render('Filter')}\n        </div>\n    );\n};\n\nexport const DefaultColumnFilter = ({\n    column: {\n        filterValue,\n        setFilter,\n        preFilteredRows: { length },\n    },\n}) => {\n    return (\n        <Input\n            value={filterValue || ''}\n            onChange={(e) => {\n                setFilter(e.target.value || undefined);\n            }}\n            placeholder={`search (${length}) ...`}\n        />\n    );\n};\n\nexport const SelectColumnFilter = ({\n    column: { filterValue, setFilter, preFilteredRows, id },\n}) => {\n    const options = React.useMemo(() => {\n        const options = new Set();\n        preFilteredRows.forEach((row) => {\n            options.add(row.values[id]);\n        });\n        return [...options.values()];\n    }, [id, preFilteredRows]);\n\n    return (\n        <CustomInput\n            id='custom-select'\n            type='select'\n            value={filterValue}\n            onChange={(e) => {\n                setFilter(e.target.value || undefined);\n            }}>\n            <option value=''>All</option>\n            {options.map((option) => (\n                <option key={option} value={option}>\n                    {option}\n                </option>\n            ))}\n        </CustomInput>\n    );\n};\n\nexport const DateFilter = (props) => {\n    const {\n        column: { setFilter, preFilteredRows },\n    } = props;\n\n    useEffect(() => {\n        setFilter(filterByDate());\n    }, []);\n\n    const returnRows = (requiredDate) => {\n        const todaysDate = moment();\n        const requiredData = preFilteredRows.filter((row) => {\n            return (\n                moment(row.values['node.createdAt']).isAfter(requiredDate) &&\n                moment(row.values['node.createdAt']).isBefore(todaysDate)\n            );\n        });\n        return requiredData;\n    };\n\n    const filterByDate = (value = '1W') => {\n        let requiredDate;\n        switch (value) {\n            case '1M':\n                requiredDate = moment().subtract(1, 'month');\n                return returnRows(requiredDate);\n            case '3M':\n                requiredDate = moment().subtract(3, 'months');\n                return returnRows(requiredDate);\n            case 'L3M':\n                requiredDate = moment().subtract(3, 'months');\n                const requiredData = preFilteredRows.filter((row) => {\n                    return moment(row.values['node.createdAt']).isBefore(\n                        requiredDate\n                    );\n                });\n                return requiredData;\n            default:\n                requiredDate = moment().subtract(1, 'week');\n                return returnRows(requiredDate);\n        }\n    };\n    return (\n        <Input\n            type='select'\n            onChange={(e) => {\n                setFilter(filterByDate(e.target.value));\n            }}>\n            <option value='1W'>Past week</option>\n            <option value='1M'>1 month</option>\n            <option value='3M'>3 months</option>\n            <option value='L3M'>&lt; 3 months</option>\n        </Input>\n    );\n};\n","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/PRColumns.js",["85"],"import { format } from 'date-fns';\nimport { DateFilter, SelectColumnFilter } from './filters';\n\nexport const COLUMNS = [\n    {\n        Header: 'Created At',\n        Footer: 'Created At',\n        accessor: 'node.createdAt',\n        Cell: ({ value }) => {\n            return format(new Date(value), 'dd/MM/yyyy');\n        },\n        disableSortBy: true,\n        Filter: DateFilter,\n        filter: (rows, columnId, filterValues) => {\n            return filterValues;\n        },\n    },\n    // {\n    //     id: 'node.closed',\n    //     Header: 'Status',\n    //     Footer: 'Status',\n    //     accessor: d => { return d.node.closed ? \"Closed\" : \"Open\" },\n    //     Filter: SelectColumnFilter,\n    //     filter: 'equals'\n    // },\n    {\n        Header: 'Status',\n        Footer: 'Status',\n        accessor: 'node.state',\n        Filter: SelectColumnFilter,\n        filter: 'equals',\n        disableSortBy: true,\n    },\n    {\n        Header: 'Title',\n        Footer: 'Title',\n        accessor: 'node.title',\n        Cell: ({ cell: { value }, row: { original } }) => (\n            <a href={original.node.url} target='_blank'>\n                {value}\n            </a>\n        ),\n    },\n    {\n        Header: 'Updated At',\n        Footer: 'Updated At',\n        accessor: 'node.updatedAt',\n        Cell: ({ value }) => {\n            return format(new Date(value), 'dd/MM/yyyy');\n        },\n        disableFilters: true,\n    },\n    {\n        Header: 'Author',\n        Footer: 'Author',\n        accessor: 'node.author.login',\n        disableFilters: true,\n    },\n];\n","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/IssueColumns.js",["86","87"],"import { format } from 'date-fns';\nimport { CustomInput } from 'reactstrap';\nimport { DateFilter, SelectColumnFilter } from './filters';\n\nexport const COLUMNS = [\n    {\n        Header: 'Created At',\n        Footer: 'Created At',\n        accessor: 'node.createdAt',\n        Cell: ({ value }) => {\n            return format(new Date(value), 'dd/MM/yyyy');\n        },\n        disableSortBy: true,\n        Filter: DateFilter,\n        filter: (rows, columnId, filterValues) => {\n            return filterValues;\n        },\n    },\n    // {\n    //     id: 'node.closed',\n    //     Header: 'Status',\n    //     Footer: 'Status',\n    //     accessor: d => { return d.node.closed ? \"Closed\" : \"Open\" },\n    //     Filter: SelectColumnFilter,\n    //     filter: 'equals'\n    // },\n    {\n        Header: 'Status',\n        Footer: 'Status',\n        accessor: 'node.state',\n        Filter: SelectColumnFilter,\n        filter: 'equals',\n        disableSortBy: true,\n    },\n    {\n        Header: 'Title',\n        Footer: 'Title',\n        accessor: 'node.title',\n        Cell: ({ cell: { value }, row: { original } }) => (\n            <a href={original.node.url} target='_blank'>\n                {value}\n            </a>\n        ),\n    },\n    {\n        Header: 'Updated At',\n        Footer: 'Updated At',\n        accessor: 'node.updatedAt',\n        Cell: ({ value }) => {\n            return format(new Date(value), 'dd/MM/yyyy');\n        },\n        disableFilters: true,\n    },\n    {\n        Header: 'Author',\n        Footer: 'Author',\n        accessor: 'node.author.login',\n        disableFilters: true,\n    },\n];\n",{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":2,"column":35,"nodeType":"94","messageId":"95","endLine":2,"endColumn":40},{"ruleId":"92","severity":1,"message":"96","line":2,"column":42,"nodeType":"94","messageId":"95","endLine":2,"endColumn":48},{"ruleId":"92","severity":1,"message":"97","line":4,"column":8,"nodeType":"94","messageId":"95","endLine":4,"endColumn":16},{"ruleId":"92","severity":1,"message":"98","line":5,"column":8,"nodeType":"94","messageId":"95","endLine":5,"endColumn":22},{"ruleId":"92","severity":1,"message":"99","line":4,"column":10,"nodeType":"94","messageId":"95","endLine":4,"endColumn":18},{"ruleId":"92","severity":1,"message":"100","line":10,"column":35,"nodeType":"94","messageId":"95","endLine":10,"endColumn":42},{"ruleId":"92","severity":1,"message":"99","line":4,"column":10,"nodeType":"94","messageId":"95","endLine":4,"endColumn":18},{"ruleId":"92","severity":1,"message":"100","line":10,"column":35,"nodeType":"94","messageId":"95","endLine":10,"endColumn":42},{"ruleId":"92","severity":1,"message":"99","line":1,"column":10,"nodeType":"94","messageId":"95","endLine":1,"endColumn":18},{"ruleId":"92","severity":1,"message":"101","line":1,"column":20,"nodeType":"94","messageId":"95","endLine":1,"endColumn":27},{"ruleId":"92","severity":1,"message":"102","line":2,"column":10,"nodeType":"94","messageId":"95","endLine":2,"endColumn":14},{"ruleId":"92","severity":1,"message":"103","line":7,"column":10,"nodeType":"94","messageId":"95","endLine":7,"endColumn":16},{"ruleId":"92","severity":1,"message":"104","line":31,"column":9,"nodeType":"94","messageId":"95","endLine":31,"endColumn":13},{"ruleId":"92","severity":1,"message":"99","line":1,"column":10,"nodeType":"94","messageId":"95","endLine":1,"endColumn":18},{"ruleId":"92","severity":1,"message":"101","line":1,"column":20,"nodeType":"94","messageId":"95","endLine":1,"endColumn":27},{"ruleId":"92","severity":1,"message":"102","line":2,"column":10,"nodeType":"94","messageId":"95","endLine":2,"endColumn":14},{"ruleId":"92","severity":1,"message":"103","line":7,"column":10,"nodeType":"94","messageId":"95","endLine":7,"endColumn":16},{"ruleId":"92","severity":1,"message":"104","line":31,"column":9,"nodeType":"94","messageId":"95","endLine":31,"endColumn":13},{"ruleId":"92","severity":1,"message":"105","line":3,"column":7,"nodeType":"94","messageId":"95","endLine":3,"endColumn":16},{"ruleId":"106","severity":1,"message":"107","line":67,"column":8,"nodeType":"108","endLine":67,"endColumn":10,"suggestions":"109"},{"ruleId":"110","severity":1,"message":"111","line":39,"column":13,"nodeType":"112","endLine":39,"endColumn":57},{"ruleId":"92","severity":1,"message":"113","line":2,"column":10,"nodeType":"94","messageId":"95","endLine":2,"endColumn":21},{"ruleId":"110","severity":1,"message":"111","line":40,"column":13,"nodeType":"112","endLine":40,"endColumn":57},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'ACIssues' is defined but never used.","'ACPullRequests' is defined but never used.","'useState' is defined but never used.","'refetch' is assigned a value but never used.","'useMemo' is defined but never used.","'Link' is defined but never used.","'Button' is defined but never used.","'rows' is assigned a value but never used.","'MY_ISSUES' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'filterByDate' and 'setFilter'. Either include them or remove the dependency array.","ArrayExpression",["116"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'CustomInput' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"117","fix":"118"},"Update the dependencies array to be: [filterByDate, setFilter]",{"range":"119","text":"120"},[1680,1682],"[filterByDate, setFilter]"]