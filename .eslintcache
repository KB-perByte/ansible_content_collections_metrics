[{"/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/index.js":"1","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/App.js":"2","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/Navbar.js":"3","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/queries/queries.js":"4","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/IssueList.js":"5","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/ACIssues.js":"6","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/IssueColumns.js":"7","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/IssueTable.js":"8","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/filters.js":"9","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/ACPullRequests.js":"10","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/PRTable.js":"11","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/PRColumns.js":"12","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/Collections.js":"13","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/CollectionInsights.js":"14"},{"size":614,"mtime":1611329763642,"results":"15","hashOfConfig":"16"},{"size":1327,"mtime":1611420852219,"results":"17","hashOfConfig":"16"},{"size":363,"mtime":1611254299816,"results":"18","hashOfConfig":"16"},{"size":2348,"mtime":1611424285103,"results":"19","hashOfConfig":"16"},{"size":4450,"mtime":1611248508565,"results":"20","hashOfConfig":"16"},{"size":1781,"mtime":1611390463436,"results":"21","hashOfConfig":"16"},{"size":1320,"mtime":1611389582542,"results":"22","hashOfConfig":"16"},{"size":5225,"mtime":1611383809598,"results":"23","hashOfConfig":"16"},{"size":1310,"mtime":1611258996401,"results":"24","hashOfConfig":"16"},{"size":1791,"mtime":1611390468397,"results":"25","hashOfConfig":"16"},{"size":5205,"mtime":1611385200262,"results":"26","hashOfConfig":"16"},{"size":1320,"mtime":1611390576008,"results":"27","hashOfConfig":"16"},{"size":1598,"mtime":1611421997431,"results":"28","hashOfConfig":"16"},{"size":1210,"mtime":1611424226683,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"3u8gy2",{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"32"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/index.js",[],["70","71"],"/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/App.js",["72","73","74","75"],"import React from 'react';\nimport { BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport ACIssues from './components/ACIssues';\nimport ACPullRequests from './components/ACPullRequests';\nimport Collections from './components/Collections';\n\n\nfunction App() {  \n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar />\n        {/* <ACIssues />\n        <br></br>\n        <br></br>\n        <br></br>\n        <br></br>\n        <ACPullRequests /> */}\n        <Collections />\n      </div>\n    </Router>\n  );\n}\n\n\n// function App() {\n\n//   const { loading, error, data } = useQuery(EXCHANGE_RATE);\n//   console.log(data);\n\n//   if (loading) return <p>Loading...</p>;\n//   if (error) return <p>Error :(</p>;\n\n//   return data.rates.map(({ currency, rate }) => (\n//     <div key={currency}>\n//       <p>\n//         {currency}: {rate}\n//       </p>\n//     </div>\n//   ));\n\n//   return (\n//       <div className=\"App\">\n//         <h2>My First Apollo App</h2>\n//         { loading && <h2>Loading...</h2>}\n//         { error && <h2>Whoops... Something went wrong</h2>}\n//         { data.rates.map((rate, id) => (\n//           <p id={ id }>{ rate.currency }</p>\n//         ))}\n//         {/* <p>{ data.rates }</p> */}\n//       </div>\n//   );\n// }\n\nexport default App;\n","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/Navbar.js",[],"/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/queries/queries.js",["76"],"import { gql } from '@apollo/client';\n\nconst MY_ISSUES =  gql`\n    {\n        repositoryOwner(login: \"BroadwayFriends\") {\n        repository(name: \"FriendlyNeighborAndroid\") {\n            name\n            issues(last: 100) {\n            totalCount\n            edges {\n                node {\n                id\n                createdAt\n                title\n                url\n                createdAt\n                author {\n                    login\n                }\n                closed\n                }\n            }\n            }\n        }\n        }\n    }\n`;\n\nconst ISSUES = gql`\n    query ($repositoryName: String!){\n        repository(name: $repositoryName, owner: \"ansible-collections\") {\n            name,\n            issues(last: 100) {\n            edges {\n                node {\n                author {\n                    login\n                }\n                state\n                title\n                createdAt\n                url\n                updatedAt\n                id\n                }\n            }\n            }\n        }\n    }\n`;\n\nconst PR = gql`\n    query ($repositoryName: String!){\n        repository(name: $repositoryName, owner: \"ansible-collections\") {\n        name\n        pullRequests(last: 100) {\n            edges {\n            node {\n                author {\n                login\n                }\n                createdAt\n                merged\n                mergeable\n                milestone {\n                description\n                creator {\n                    login\n                }\n                }\n                updatedAt\n                url\n                state\n                title\n            }\n            }\n        }\n    }\n  }\n`;\n\nconst COLLECTION_INSIGHTS = gql`\n    query ($repositoryName: String!){\n        repository(name: $repositoryName, owner: \"ansible-collections\") {\n        openIssues: issues(filterBy: {states: [OPEN]}) {\n            totalCount\n        }\n        closedIssues: issues(filterBy: {states: [CLOSED]}) {\n            totalCount\n        }    \n        openPRs: pullRequests(states: OPEN) {\n            totalCount\n        }\n        closedPRs: pullRequests(states: CLOSED) {\n            totalCount\n        }\n        mergedPRs: pullRequests(states: MERGED) {\n            totalCount\n        }\n        }\n    }\n`;\n\n\nexport { ISSUES, PR, COLLECTION_INSIGHTS };","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/IssueList.js",["77","78","79","80"],"import { useState, useMemo } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useTable } from 'react-table';\nimport { COLUMNS } from './IssueColumns';\n\n\nconst IssueList = ({ issues }) => {\n\n    const columns = useMemo(() => COLUMNS, []);\n    const data = useMemo(() => issues, []);\n\n    const tableInstance = useTable({\n        columns,\n        data\n    });\n\n    const { \n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        footerGroups,\n        rows,\n        prepareRow\n    } = tableInstance;\n\n    const [count, setCount] = useState(issues.length);\n\n    return (\n        <div className=\"issue-list\">\n            <h2>Issues ({ count })</h2>\n\n            <table className=\"issue-table\" { ...getTableProps() }>\n                <thead>\n                    {\n                        headerGroups.map((headerGroup) => (\n                            <tr { ...headerGroup.getHeaderGroupProps() }>\n                                {\n                                    headerGroup.headers.map((column) => (\n                                        <th { ...column.getHeaderProps() }>\n                                            {\n                                                column.render('Header')\n                                            }\n                                        </th>\n                                    ))\n                                }\n                            </tr>\n                        ))\n                    }\n                </thead>\n                <tbody { ...getTableBodyProps() }>\n                    {\n                        rows.map((row) => {\n                            prepareRow(row)\n                            return (\n                                <tr { ...row.getRowProps() }>\n                                    {\n                                        row.cells.map((cell) => {\n                                            return (\n                                                <td { ...cell.getCellProps() }>\n                                                    {\n                                                        cell.render('Cell')\n                                                    }\n                                                </td>\n                                            )\n                                        })\n                                    }\n                                </tr>\n                            )\n                        })\n                    }\n                </tbody>\n                {/* <tfoot>\n                    {\n                        footerGroups.map((footerGroup) => (\n                            <tr { ...footerGroup.getFooterGroupProps() }>\n                                {\n                                    footerGroup.headers.map((column) => (\n                                        <td { ...column.getFooterProps() }>\n                                            {\n                                                column.render('Footer')\n                                            }\n                                        </td>   \n                                    ))\n                                }\n                            </tr>\n                        ))\n                    }\n                </tfoot> */}\n            </table>\n        </div>\n\n    )\n\n    // return (\n    //     <div className=\"issue-list\">\n    //         <h2>Issues ({ count })</h2>\n    //         <table className=\"issue-table\">\n    //             <thead>\n    //                 <tr>\n    //                     <th>Created On</th>\n    //                     <th>Title</th>\n    //                     <th>Author</th>\n    //                 </tr>\n    //             </thead>\n    //             <tbody>\n    //                 { issues.map((issue) => (\n    //                     <tr key={ issue.node.id }>\n    //                         <td>\n    //                             { Date(issue.node.createdAt) }\n    //                         </td>\n    //                         <td>\n    //                             { <a href={ issue.node.url }>{ issue.node.title }</a> }\n    //                         </td>\n    //                         <td>\n    //                             { issue.node.author.login }\n    //                         </td>\n    //                     </tr>\n    //                 )) }\n    //             </tbody>\n    //         </table>\n    //     </div>\n    // );\n}\n \nexport default IssueList;",["81","82"],"/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/ACIssues.js",["83","84"],"import { useQuery } from '@apollo/client';\nimport { ISSUES } from '../queries/queries';\nimport IssueTable from './IssueTable';\nimport { useState } from 'react';\n\nconst ACIssues = ({ repository }) => {\n\n  // const [repository, setRepository] = useState(\"cisco.nxos\");\n\n    const { loading, error, data, refetch } = useQuery(ISSUES, {\n      variables: {repositoryName: repository}\n    });\n    // console.log(data);\n\n    return (\n        <div className=\"ac-issues\">\n{/* \n          <div>\n            <label>Repositories: </label>\n            <select\n              value={repository}\n              onChange={(e) => setRepository(e.target.value)}>\n              <option value=\"cisco.nxos\">cisco.nxos</option>\n              <option value=\"cisco.ios\">cisco.ios</option>\n              <option value=\"cisco.iosxr\">cisco.iosxr</option>\n              <option value=\"arista.eos\">arista.eos</option>\n              <option value=\"vyos.vyos\">vyos.vyos</option>\n              <option value=\"junipernetworks.junos\">junipernetworks.junos</option>\n              <option value=\"cisco.asa\">cisco.asa</option>\n              <option value=\"ansible.netcommon\">ansible.netcommon</option>\n              <option value=\"frr.frr\">frr.frr</option>\n              <option value=\"openvswitch.openvswitch\">openvswitch.openvswitch</option>\n              <option value=\"community.yang\">community.yang</option>\n              <option value=\"ansible.utils\">ansible.utils</option>\n            </select>\n          </div> */}\n\n            { error && <div>{ error }</div>}\n            { loading && <div>Loading...</div>}\n            { data && <IssueTable name={ data.repository.name } issues={ data.repository.issues.edges } count={ data.repository.issues.edges.length }/> }\n        </div>\n    );\n\n} \nexport default ACIssues;","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/IssueColumns.js",["85"],"import { format } from 'date-fns';\nimport { SelectColumnFilter } from './filters';\n\n\n\nexport const COLUMNS = [\n    {\n        Header: 'Created At',\n        Footer: 'Created At',\n        accessor: 'node.createdAt',\n        Cell: ({ value }) => { return format(new Date(value), 'dd/MM/yyyy') },\n        disableFilters: true\n    },\n    // {\n    //     id: 'node.closed',\n    //     Header: 'Status',\n    //     Footer: 'Status',\n    //     accessor: d => { return d.node.closed ? \"Closed\" : \"Open\" },\n    //     Filter: SelectColumnFilter,\n    //     filter: 'equals'\n    // },\n    {\n        Header: 'Status',\n        Footer: 'Status',\n        accessor: 'node.state',\n        Filter: SelectColumnFilter,\n        filter: 'equals',\n        disableSortBy: true\n    },\n    {\n        Header: 'Title',\n        Footer: 'Title',\n        accessor: 'node.title',\n        Cell: ({ cell: { value }, row: { original } }) => <a href={original.node.url} target=\"_blank\">{value}</a>\n    },\n    {\n        Header: 'Updated At',\n        Footer: 'Updated At',\n        accessor: 'node.updatedAt',\n        Cell: ({ value }) => { return format(new Date(value), 'dd/MM/yyyy') },\n        disableFilters: true\n    },\n    {\n        Header: 'Author',\n        Footer: 'Author',\n        accessor: 'node.author.login',\n        disableFilters: true\n    }\n]","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/IssueTable.js",["86","87","88","89","90"],"import { useState, useMemo } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Table } from 'reactstrap';\nimport { useTable, useFilters, useSortBy, usePagination } from 'react-table';\nimport { COLUMNS } from './IssueColumns';\nimport { Filter, DefaultColumnFilter } from './filters';\nimport { Button } from \"bootstrap\";\n\n\nconst IssueTable = ({ name, issues, count }) => {\n\n    // const columns = useMemo(() => COLUMNS, []);\n    // const data = useMemo(() => issues, []);\n\n    const columns = COLUMNS;\n    const data = issues;\n\n    const tableInstance = useTable({\n        columns,\n        data,\n        defaultColumn: { Filter: DefaultColumnFilter },\n        },\n        useFilters,\n        useSortBy,\n        usePagination);\n\n    const { \n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        page,\n        nextPage,\n        previousPage,\n        canNextPage,\n        canPreviousPage,\n        pageOptions,\n        gotoPage,\n        pageCount,\n        setPageSize,\n        state,\n        prepareRow\n    } = tableInstance;\n\n    const { pageIndex, pageSize } = state;\n\n    const generateSortingIndicator = (column) => {\n        return column.isSorted ? (column.isSortedDesc ? ' ⬇' : ' ⬆') : ' ⬍';\n    };\n\n    return (\n        <div className=\"issue-list\">\n            <h2>Repository: { name }</h2>\n            <h2>Issues: { count }</h2>\n\n            <Table bordered hover className=\"issue-table\" { ...getTableProps() }>\n                <thead>\n                    {\n                        headerGroups.map((headerGroup) => (\n                            <tr { ...headerGroup.getHeaderGroupProps() }>\n                                {\n                                    headerGroup.headers.map((column) => (\n                                        <th { ...column.getHeaderProps(column.getSortByToggleProps()) }>\n                                            {\n                                                column.render('Header')\n                                            }\n                                            <span>\n                                                { generateSortingIndicator(column) }\n                                            </span>\n                                            <Filter column={column} />\n                                        </th>\n                                    ))\n                                }\n                            </tr>\n                        ))\n                    }\n                </thead>\n                <tbody { ...getTableBodyProps() }>\n                    {\n                        page.map((row) => {\n                            prepareRow(row)\n                            return (\n                                <tr { ...row.getRowProps() }>\n                                    {\n                                        row.cells.map((cell) => {\n                                            return (\n                                                <td { ...cell.getCellProps() }>\n                                                    {\n                                                        cell.render('Cell')\n                                                    }\n                                                </td>\n                                            )\n                                        })\n                                    }\n                                </tr>\n                            )\n                        })\n                    }\n                </tbody>\n            </Table>\n            <div>\n                <span>\n                    Page{ ' ' }\n                    <strong>\n                        { pageIndex + 1 } of { pageOptions.length }\n                    </strong>\n                    { ' ' }\n                </span>\n                <span>\n                    | Go to page: { ' ' }\n                    <input type=\"number\" defaultValue={ pageIndex + 1 }\n                        onChange={ (e) => {\n                            const pageNumber = e.target.value ? Number(e.target.value) - 1 : 0\n                            gotoPage(pageNumber)\n                        } }\n                        style={ { width: '50px' } }>\n                    </input>\n                </span>\n                <select value={ pageSize } onChange={ (e) => setPageSize(Number(e.target.value)) }>\n                    {\n                        [10, 25, 50].map((pageSize) => (\n                            <option key={ pageSize } value={ pageSize }>\n                                Show { pageSize }\n                            </option>\n                        ))\n                    }\n                </select>\n                <button onClick={ () => gotoPage(0) } disabled={ !canPreviousPage }>\n                    { '<<' }\n                </button>\n                <button onClick={ () => previousPage() } disabled={ !canPreviousPage }>Previous</button>\n                <button onClick={ () => nextPage() } disabled={ !canNextPage }>Next</button>\n                <button onClick={ () => gotoPage(pageCount - 1) } disabled={ !canNextPage }>\n                    { '>>' }\n                </button>\n            </div>\n        </div>\n    )\n}\n \nexport default IssueTable;","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/filters.js",["91","92"],"import React from 'react';\nimport { Input, CustomInput } from 'reactstrap';\nimport { DatePicker, DateRangePicker } from 'rsuite';\n\nexport const Filter = ({ column }) => {\n  return (\n    <div style={{ marginTop: 5 }}>\n      {column.canFilter && column.render('Filter')}\n    </div>\n  );\n};\n\nexport const DefaultColumnFilter = ({\n  column: {\n    filterValue,\n    setFilter,\n    preFilteredRows: { length },\n  },\n}) => {\n  return (\n    <Input\n      value={filterValue || ''}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined);\n      }}\n      placeholder={`search (${length}) ...`}\n    />\n  );\n};\n\nexport const SelectColumnFilter = ({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}) => {\n  const options = React.useMemo(() => {\n    const options = new Set();\n    preFilteredRows.forEach((row) => {\n      options.add(row.values[id]);\n    });\n    return [...options.values()];\n  }, [id, preFilteredRows]);\n\n  return (\n    <CustomInput\n      id='custom-select'\n      type='select'\n      value={filterValue}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined);\n      }}\n    >\n      <option value=''>All</option>\n      {options.map((option) => (\n        <option key={option} value={option}>\n          {option}\n        </option>\n      ))}\n    </CustomInput>\n  );\n};\n",["93","94"],"/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/ACPullRequests.js",["95","96"],"import { useQuery } from '@apollo/client';\nimport { PR } from '../queries/queries';\nimport PRTable from './PRTable';\nimport { useState } from 'react';\n\nconst ACPullRequests = ({ repository }) => {\n\n  // const [repository, setRepository] = useState(\"cisco.nxos\");\n\n    const { loading, error, data, refetch } = useQuery(PR, {\n      variables: {repositoryName: repository}\n    });\n    // console.log(data);\n\n    return (\n        <div className=\"ac-pull-requests\">\n\n          {/* <div>\n            <label>Repositories: </label>\n            <select\n              value={repository}\n              onChange={(e) => setRepository(e.target.value)}>\n              <option value=\"cisco.nxos\">cisco.nxos</option>\n              <option value=\"cisco.ios\">cisco.ios</option>\n              <option value=\"cisco.iosxr\">cisco.iosxr</option>\n              <option value=\"arista.eos\">arista.eos</option>\n              <option value=\"vyos.vyos\">vyos.vyos</option>\n              <option value=\"junipernetworks.junos\">junipernetworks.junos</option>\n              <option value=\"cisco.asa\">cisco.asa</option>\n              <option value=\"ansible.netcommon\">ansible.netcommon</option>\n              <option value=\"frr.frr\">frr.frr</option>\n              <option value=\"openvswitch.openvswitch\">openvswitch.openvswitch</option>\n              <option value=\"community.yang\">community.yang</option>\n              <option value=\"ansible.utils\">ansible.utils</option>\n            </select>\n          </div> */}\n\n            { error && <div>{ error }</div>}\n            { loading && <div>Loading...</div>}\n            { data && <PRTable name={ data.repository.name } pr={ data.repository.pullRequests.edges } count={ data.repository.pullRequests.edges.length }/> }\n        </div>\n    );\n\n} \nexport default ACPullRequests;","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/PRTable.js",["97","98","99","100","101"],"import { useState, useMemo } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Table } from 'reactstrap';\nimport { useTable, useFilters, useSortBy, usePagination } from 'react-table';\nimport { COLUMNS } from './PRColumns';\nimport { Filter, DefaultColumnFilter } from './filters';\nimport { Button } from \"bootstrap\";\n\n\nconst PRTable = ({ name, pr, count }) => {\n\n    // const columns = useMemo(() => COLUMNS, []);\n    // const data = useMemo(() => pr, []);\n\n    const columns = COLUMNS;\n    const data = pr;\n\n    const tableInstance = useTable({\n        columns,\n        data,\n        defaultColumn: { Filter: DefaultColumnFilter },\n        },\n        useFilters,\n        useSortBy,\n        usePagination);\n\n    const { \n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        page,\n        nextPage,\n        previousPage,\n        canNextPage,\n        canPreviousPage,\n        pageOptions,\n        gotoPage,\n        pageCount,\n        setPageSize,\n        state,\n        prepareRow\n    } = tableInstance;\n\n    const { pageIndex, pageSize } = state;\n\n    const generateSortingIndicator = (column) => {\n        return column.isSorted ? (column.isSortedDesc ? ' ⬇' : ' ⬆') : ' ⬍';\n    };\n\n    return (\n        <div className=\"pr-list\">\n            <h2>Repository: { name }</h2>\n            <h2>Pull Requests: { count }</h2>\n\n            <Table bordered hover className=\"pr-table\" { ...getTableProps() }>\n                <thead>\n                    {\n                        headerGroups.map((headerGroup) => (\n                            <tr { ...headerGroup.getHeaderGroupProps() }>\n                                {\n                                    headerGroup.headers.map((column) => (\n                                        <th { ...column.getHeaderProps(column.getSortByToggleProps()) }>\n                                            {\n                                                column.render('Header')\n                                            }\n                                            <span>\n                                                { generateSortingIndicator(column) }\n                                            </span>\n                                            <Filter column={column} />\n                                        </th>\n                                    ))\n                                }\n                            </tr>\n                        ))\n                    }\n                </thead>\n                <tbody { ...getTableBodyProps() }>\n                    {\n                        page.map((row) => {\n                            prepareRow(row)\n                            return (\n                                <tr { ...row.getRowProps() }>\n                                    {\n                                        row.cells.map((cell) => {\n                                            return (\n                                                <td { ...cell.getCellProps() }>\n                                                    {\n                                                        cell.render('Cell')\n                                                    }\n                                                </td>\n                                            )\n                                        })\n                                    }\n                                </tr>\n                            )\n                        })\n                    }\n                </tbody>\n            </Table>\n            <div>\n                <span>\n                    Page{ ' ' }\n                    <strong>\n                        { pageIndex + 1 } of { pageOptions.length }\n                    </strong>\n                    { ' ' }\n                </span>\n                <span>\n                    | Go to page: { ' ' }\n                    <input type=\"number\" defaultValue={ pageIndex + 1 }\n                        onChange={ (e) => {\n                            const pageNumber = e.target.value ? Number(e.target.value) - 1 : 0\n                            gotoPage(pageNumber)\n                        } }\n                        style={ { width: '50px' } }>\n                    </input>\n                </span>\n                <select value={ pageSize } onChange={ (e) => setPageSize(Number(e.target.value)) }>\n                    {\n                        [10, 25, 50].map((pageSize) => (\n                            <option key={ pageSize } value={ pageSize }>\n                                Show { pageSize }\n                            </option>\n                        ))\n                    }\n                </select>\n                <button onClick={ () => gotoPage(0) } disabled={ !canPreviousPage }>\n                    { '<<' }\n                </button>\n                <button onClick={ () => previousPage() } disabled={ !canPreviousPage }>Previous</button>\n                <button onClick={ () => nextPage() } disabled={ !canNextPage }>Next</button>\n                <button onClick={ () => gotoPage(pageCount - 1) } disabled={ !canNextPage }>\n                    { '>>' }\n                </button>\n            </div>\n        </div>\n    )\n}\n \nexport default PRTable;","/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/PRColumns.js",["102"],"/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/Collections.js",[],"/home/prsahoo/Desktop/Networks_Metrics_Project/metrics_project_react/ansible-github-metrics/src/components/CollectionInsights.js",[],{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":2,"column":35,"nodeType":"109","messageId":"110","endLine":2,"endColumn":40},{"ruleId":"107","severity":1,"message":"111","line":2,"column":42,"nodeType":"109","messageId":"110","endLine":2,"endColumn":48},{"ruleId":"107","severity":1,"message":"112","line":4,"column":8,"nodeType":"109","messageId":"110","endLine":4,"endColumn":16},{"ruleId":"107","severity":1,"message":"113","line":5,"column":8,"nodeType":"109","messageId":"110","endLine":5,"endColumn":22},{"ruleId":"107","severity":1,"message":"114","line":3,"column":7,"nodeType":"109","messageId":"110","endLine":3,"endColumn":16},{"ruleId":"107","severity":1,"message":"115","line":2,"column":10,"nodeType":"109","messageId":"110","endLine":2,"endColumn":14},{"ruleId":"116","severity":1,"message":"117","line":10,"column":40,"nodeType":"118","endLine":10,"endColumn":42,"suggestions":"119"},{"ruleId":"107","severity":1,"message":"120","line":21,"column":9,"nodeType":"109","messageId":"110","endLine":21,"endColumn":21},{"ruleId":"107","severity":1,"message":"121","line":26,"column":19,"nodeType":"109","messageId":"110","endLine":26,"endColumn":27},{"ruleId":"103","replacedBy":"122"},{"ruleId":"105","replacedBy":"123"},{"ruleId":"107","severity":1,"message":"124","line":4,"column":10,"nodeType":"109","messageId":"110","endLine":4,"endColumn":18},{"ruleId":"107","severity":1,"message":"125","line":10,"column":35,"nodeType":"109","messageId":"110","endLine":10,"endColumn":42},{"ruleId":"126","severity":1,"message":"127","line":34,"column":59,"nodeType":"128","endLine":34,"endColumn":103},{"ruleId":"107","severity":1,"message":"124","line":1,"column":10,"nodeType":"109","messageId":"110","endLine":1,"endColumn":18},{"ruleId":"107","severity":1,"message":"129","line":1,"column":20,"nodeType":"109","messageId":"110","endLine":1,"endColumn":27},{"ruleId":"107","severity":1,"message":"115","line":2,"column":10,"nodeType":"109","messageId":"110","endLine":2,"endColumn":14},{"ruleId":"107","severity":1,"message":"130","line":7,"column":10,"nodeType":"109","messageId":"110","endLine":7,"endColumn":16},{"ruleId":"107","severity":1,"message":"131","line":31,"column":9,"nodeType":"109","messageId":"110","endLine":31,"endColumn":13},{"ruleId":"107","severity":1,"message":"132","line":3,"column":10,"nodeType":"109","messageId":"110","endLine":3,"endColumn":20},{"ruleId":"107","severity":1,"message":"133","line":3,"column":22,"nodeType":"109","messageId":"110","endLine":3,"endColumn":37},{"ruleId":"103","replacedBy":"134"},{"ruleId":"105","replacedBy":"135"},{"ruleId":"107","severity":1,"message":"124","line":4,"column":10,"nodeType":"109","messageId":"110","endLine":4,"endColumn":18},{"ruleId":"107","severity":1,"message":"125","line":10,"column":35,"nodeType":"109","messageId":"110","endLine":10,"endColumn":42},{"ruleId":"107","severity":1,"message":"124","line":1,"column":10,"nodeType":"109","messageId":"110","endLine":1,"endColumn":18},{"ruleId":"107","severity":1,"message":"129","line":1,"column":20,"nodeType":"109","messageId":"110","endLine":1,"endColumn":27},{"ruleId":"107","severity":1,"message":"115","line":2,"column":10,"nodeType":"109","messageId":"110","endLine":2,"endColumn":14},{"ruleId":"107","severity":1,"message":"130","line":7,"column":10,"nodeType":"109","messageId":"110","endLine":7,"endColumn":16},{"ruleId":"107","severity":1,"message":"131","line":31,"column":9,"nodeType":"109","messageId":"110","endLine":31,"endColumn":13},{"ruleId":"126","severity":1,"message":"127","line":34,"column":59,"nodeType":"128","endLine":34,"endColumn":103},"no-native-reassign",["136"],"no-negated-in-lhs",["137"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'ACIssues' is defined but never used.","'ACPullRequests' is defined but never used.","'MY_ISSUES' is assigned a value but never used.","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'issues'. Either include it or remove the dependency array.","ArrayExpression",["138"],"'footerGroups' is assigned a value but never used.","'setCount' is assigned a value but never used.",["136"],["137"],"'useState' is defined but never used.","'refetch' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'useMemo' is defined but never used.","'Button' is defined but never used.","'rows' is assigned a value but never used.","'DatePicker' is defined but never used.","'DateRangePicker' is defined but never used.",["136"],["137"],"no-global-assign","no-unsafe-negation",{"desc":"139","fix":"140"},"Update the dependencies array to be: [issues]",{"range":"141","text":"142"},[292,294],"[issues]"]